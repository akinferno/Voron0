[include fluidd.cfg]
[include toolheadCAN.cfg]
[include OnlyFansSFW.cfg]
[include macros.cfg]
[include KAMP_Settings.cfg]
[exclude_object]

[gcode_arcs]
resolution = 0.1

[mcu]
canbus_uuid = 4457653378d4

[printer]
kinematics = corexy
max_velocity = 800
max_accel = 17000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
endstop_pin = tmc2209_stepper_x:virtual_endstop
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
position_endstop = 121
position_max = 121
position_min = -5.0
homing_speed = 40
homing_retract_dist = 0
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0
diag_pin = ^gpio4
driver_sgthrs = 115

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 120
position_max = 122
homing_speed = 40
homing_retract_dist = 0
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0
diag_pin = ^gpio3
driver_sgthrs = 115

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_max = 123
position_min = -5.0
homing_speed = 20
second_homing_speed = 3.0
homing_retract_dist = 3.0
#position_endstop = 121.280

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 100

[extruder]
step_pin = EBB:EXT_STEP
dir_pin = EBB:EXT_DIR
enable_pin = !EBB:EXT_EN
heater_pin = EBB:HE0
sensor_pin = EBB:TH0
full_steps_per_rotation = 200
microsteps = 16
rotation_distance = 4.637
nozzle_diameter = 0.400
filament_diameter = 1.750
sensor_type = PT1000
min_temp = 0
max_temp = 350
min_extrude_temp = 170
max_extrude_only_distance = 150
max_extrude_only_velocity = 120
max_extrude_cross_section = 5
pressure_advance = 0.035
pressure_advance_smooth_time = 0.040
step_pulse_duration = 0.000004
control = pid
pid_kp = 20.323
pid_ki = 1.882
pid_kd = 54.872

[tmc2209 extruder]
uart_pin = EBB:EXT_UART
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = Generic 3950
sensor_pin = gpio26
smooth_time = 3.0
min_temp = 0
max_temp = 125
control = pid
pid_kp = 57.168
pid_ki = 2.575
pid_kd = 317.284

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor _raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor chamber]
sensor_type = Generic 3950
sensor_pin = gpio27
min_temp = 0
max_temp = 100
gcode_id = chamber

[temperature_fan RPI_fans]
pin = gpio20
kick_start_time = 0.8
max_power = 1.0
sensor_type = temperature_host
control = pid
min_temp = -40
max_temp = 80
pid_kp = 1.0
pid_ki = 0.5
pid_kd = 2.0
min_speed = 0.1
max_speed = 1.0
target_temp = 45

[idle_timeout]
timeout = 1800

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[neopixel board_rgb]
pin = gpio24
chain_count = 1
color_order = GRB
initial_red = 0.0
initial_green = 0.1
initial_blue = 0.0

[mcu display]
serial = /dev/serial/by-id/usb-Klipper_stm32f042x6_140023000943304146393720-if00

[display]
lcd_type = sh1106
i2c_mcu = display
i2c_bus = i2c1a
encoder_pins = ^display:PA3, ^display:PA4
click_pin = ^!display:PA1
kill_pin = ^!display:PA5
x_offset = 3
vcomh = 31

[neopixel displayStatus]
pin = display:PA0
chain_count = 1
color_order = GRB
initial_red = 0.0
initial_green = 0.02
initial_blue = 0.1

[bed_mesh]
speed = 400
horizontal_move_z = 10
mesh_min = 5,5
mesh_max = 115,115
probe_count = 5,5
mesh_pps = 2,2
algorithm = bicubic
bicubic_tension = 0.2
move_check_distance = 3.0
split_delta_z = .010
fade_start = 1.0
fade_end = 5.0

[adxl345]
cs_pin = EBB:ADXL_CS
spi_software_sclk_pin = EBB:ADXL_SCLK
spi_software_mosi_pin = EBB:ADXL_MOSI
spi_software_miso_pin = EBB:ADXL_MISO
axes_map = x,y,z

[resonance_tester]
accel_chip = adxl345
probe_points = 
	60, 60, 20

[input_shaper]
shaper_type_x = ei
shaper_freq_x = 96.6
shaper_type_y = mzv
shaper_freq_y = 62.2

[shaketune]
result_folder: ~/printer_data/config/ShakeTune_results
#    Path where the processed results will be stored. If the folder doesn't exist,
#    it will be automatically created. You can change this if you'd like to store 
#    results in a different location.
number_of_results_to_keep: 10
#    This setting defines how many results you want to keep in the result folder.
#    Once the specified number is exceeded, older results will be automatically deleted
#    to free up space on the SD card and avoid cluttering the results folder.
keep_raw_data: False
#    If set to True, Shake&Tune will store both the processed graphs and the raw accelerometer
#    .stdata files in the results folder. This can be useful for debugging or archiving purposes.
#    Please always attach them when reporting any issues on GitHub or Discord.
show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for system commands (macros that are not part
#    of the printer.cfg file). This option allow Shake&Tune to inject them into the webui at runtime.
#    If set to False, the macros will be hidden but still accessible from the console by typing
#    their names manually, which can be useful if you prefer to encapsulate them into your own macros.
timeout: 600
#    This defines the maximum processing time (in seconds) to allows to Shake&Tune for generating 
#    graphs from a .stdata file. 10 minutes should be more than enough in most cases, but if you have
#    slower hardware (e.g., older SD cards or low-performance devices), increase it to prevent timeouts.
measurements_chunk_size: 2
#    Each Shake&Tune command uses the accelerometer to take multiple measurements. By default,
#    Shake&Tune will write a chunk of data to disk every two measurements, and at the end of the
#    command will merge these chunks into the final .stdata file for processing. "2" is a very
#    conservative setting to avoid Klipper Timer Too Close errors on lower end devices with little
#    RAM, and should work for everyone. However, if you are using a powerful computer, you may
#    wish to increase this value to keep more measurements in memory (e.g., 15-20) before writing
#    the chunk and avoid stressing the filesystem too much.
max_freq: 200
#    This setting defines the maximum frequency at which the calculation of the power spectral density
#    is cutoff. The default value should be fine for most machines and accelerometer combinations and
#    avoid touching it unless you know what you're doing.
dpi: 300
#    Controls the resolution of the generated graphs. The default value of 300 dpi was optimized
#    and strikes a balance between performance and readability, ensuring that graphs are clear
#    without using too much RAM to generate them. Usually, you shouldn't need to change this value.

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [stepper_z]
#*# position_endstop = 120.110
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -1.330000, -1.245000, -1.260000, -1.260000, -1.070000
#*# 	  -1.140000, -1.090000, -1.115000, -1.120000, -1.275000
#*# 	  -1.125000, -1.085000, -1.085000, -1.055000, -1.205000
#*# 	  -1.155000, -1.100000, -1.080000, -1.045000, -1.165000
#*# 	  -1.125000, -1.100000, -1.065000, -1.040000, -1.110000
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 5.0
#*# max_x = 115.0
#*# min_y = 5.0
#*# max_y = 115.0
